# ********RoostGPT********
"""
Test generated by RoostGPT for test Allie-test-python using AI Type Open AI and AI Model gpt-4-turbo

ROOST_METHOD_HASH=logging_configs_b4d0d31c3b
ROOST_METHOD_SIG_HASH=logging_configs_37d076d492


### Scenario 1: Valid Configuration Structure
**Details:**
  - TestName: test_logging_config_structure
  - Description: This test verifies that the `logging_configs` function returns a dictionary with the correct structure including keys like 'version', 'formatters', 'handlers', 'root', and 'loggers'.
  
**Execution:**
  - Arrange: No specific setup required.
  - Act: Call the `logging_configs` function.
  - Assert: Check that the returned dictionary contains all the necessary keys and that their associated values are of the expected type (e.g., 'formatters' should be a dictionary).

**Validation:**
  - Ensuring the correct structure of the logging configuration is crucial as it dictates how logs are formatted, handled, and stored, directly impacting log readability and maintainability.

### Scenario 2: Correctness of File Handler Filenames
**Details:**
  - TestName: test_file_handler_filenames
  - Description: This test verifies that the filenames in the file handlers include the correct date format and are assigned properly to the 'filename' attribute in each handler.

**Execution:**
  - Arrange: Retrieve the current date.
  - Act: Call the `logging_configs` function.
  - Assert: Check that the filenames for the 'file' and 'api_json' handlers include the date in the expected format and match the respective log file paths.

**Validation:**
  - Correct log file naming is essential for organizing and retrieving log data efficiently, especially when logs are archived or searched for troubleshooting.

### Scenario 3: Formatter Configuration Validation
**Details:**
  - TestName: test_formatter_configurations
  - Description: This test checks that each formatter is configured with the correct format string and any specific class attributes.

**Execution:**
  - Arrange: No specific setup required.
  - Act: Call the `logging_configs` function.
  - Assert: Verify that each formatter under the 'formatters' key is set with the appropriate format strings and class attributes.

**Validation:**
  - Proper log formatting is key to ensuring that log messages are clear and consistent, which aids in debugging and monitoring.

### Scenario 4: Handler Levels Set Correctly
**Details:**
  - TestName: test_handler_levels
  - Description: This test ensures that each handler is set with the appropriate logging level.

**Execution:**
  - Arrange: No specific setup required.
  - Act: Call the `logging_configs` function.
  - Assert: Validate that the 'level' attribute for each handler is set to the expected logging level.

**Validation:**
  - Setting the correct logging level for handlers ensures that logs capture the right amount of detail, balancing verbosity with performance.

### Scenario 5: Root Logger Configuration
**Details:**
  - TestName: test_root_logger_configuration
  - Description: This test validates that the root logger's configuration includes the correct handlers and logging level.

**Execution:**
  - Arrange: No specific setup required.
  - Act: Call the `logging_configs` function.
  - Assert: Check that the 'root' key contains the correct 'handlers' list and 'level'.

**Validation:**
  - The root logger's configuration is crucial as it typically captures all logging from an application unless overridden by specific logger configurations.

### Scenario 6: Specific Logger Configuration
**Details:**
  - TestName: test_specific_logger_configuration
  - Description: Verify that the specific logger 'api_json' is configured correctly with handlers, level, and qualification name.

**Execution:**
  - Arrange: No specific setup required.
  - Act: Call the `logging_configs` function.
  - Assert: Ensure that the 'api_json' logger is set up with the correct handlers, level, and 'qualname'.

**Validation:**
  - Specific loggers often handle logging for particular parts of an application, and their correct configuration is vital for targeted logging, which aids in focused debugging and monitoring.
"""

# ********RoostGPT********
import datetime
import logging
import pytest
from core.logs import LoggingConfigs

# Ensure the required module is available for JSON formatting
try:
    from pythonjsonlogger import jsonlogger
except ImportError:
    import sys
    print("Required module 'pythonjsonlogger' is not installed. Install it via pip:", file=sys.stderr)
    sys.exit(1)

class Test_LoggingConfigs:
    @pytest.mark.valid
    def test_logging_config_structure(self):
        config = LoggingConfigs.logging_configs()
        assert isinstance(config, dict), "Logging config should be a dictionary"
        assert 'version' in config, "Missing 'version' key in logging config"
        assert 'formatters' in config and isinstance(config['formatters'], dict), "Missing or invalid 'formatters' in logging config"
        assert 'handlers' in config and isinstance(config['handlers'], dict), "Missing or invalid 'handlers' in logging config"
        assert 'root' in config and isinstance(config['root'], dict), "Missing or invalid 'root' in logging config"
        assert 'loggers' in config and isinstance(config['loggers'], dict), "Missing or invalid 'loggers' in logging config"

    @pytest.mark.valid
    def test_file_handler_filenames(self):
        today_str = datetime.date.today().isoformat()
        config = LoggingConfigs.logging_configs()
        file_handler = config['handlers']['file']['filename']
        api_json_handler = config['handlers']['api_json']['filename']
        assert today_str in file_handler, "File handler filename does not include the current date"
        assert today_str in api_json_handler, "API JSON handler filename does not include the current date"
        assert file_handler.endswith('.log'), "File handler filename does not end with .log"
        assert api_json_handler.endswith('.json'), "API JSON handler filename does not end with .json"

    @pytest.mark.valid
    def test_formatter_configurations(self):
        config = LoggingConfigs.logging_configs()
        formatters = config['formatters']
        assert 'standard' in formatters and '%(asctime)s[%(name)s][%(levelname)s] %(message)s' == formatters['standard']['format'], "Standard formatter configuration is incorrect"
        assert 'console' in formatters and '%(message)s' == formatters['console']['format'], "Console formatter configuration is incorrect"
        assert 'json' in formatters and '%(asctime)s %(name)s %(levelname)s %(message)s' == formatters['json']['format'], "JSON formatter configuration is incorrect"
        assert 'class' in formatters['json'], "JSON formatter class attribute is missing"

    @pytest.mark.valid
    def test_handler_levels(self):
        config = LoggingConfigs.logging_configs()
        handlers = config['handlers']
        assert handlers['file']['level'] == logging.DEBUG, "File handler level should be DEBUG"
        assert handlers['console']['level'] == logging.INFO, "Console handler level should be INFO"
        assert handlers['api_json']['level'] == logging.DEBUG, "API JSON handler level should be DEBUG"

    @pytest.mark.valid
    def test_root_logger_configuration(self):
        config = LoggingConfigs.logging_configs()
        root = config['root']
        assert 'handlers' in root and isinstance(root['handlers'], list), "Root handlers configuration is missing or invalid"
        assert 'level' in root and root['level'] == logging.NOTSET, "Root level configuration is incorrect"

    @pytest.mark.valid
    def test_specific_logger_configuration(self):
        config = LoggingConfigs.logging_configs()
        api_json_logger = config['loggers']['api_json']
        assert api_json_logger['handlers'] == ['api_json'], "API JSON logger handlers are incorrect"
        assert api_json_logger['level'] == logging.DEBUG, "API JSON logger level should be DEBUG"
        assert api_json_logger['qualname'] == 'alation_rest', "API JSON logger qualification name is incorrect"
